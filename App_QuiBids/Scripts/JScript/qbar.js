var AAA = 25; var quickBuyEnabled = false; function Class_QBar() {
    var g = function () {
        var R = false; var Q = this; this.isActivated = 0; var N = []; var O = 1; var P = function () { var V = this; var ak = null; var W = null; var ai = 0; var ad = 0; var ah = 0; var Y = null; var S = 0; var aa = null; this.getAuctionId = function () { return ai }; this.init = function (an, ao, am) { aa = am; ai = an; ak = $("#bidomatic_" + ai); if (ak.length > 0) { W = $(".bidomatic_" + ai + "_bids"); $(ak).find(".bidomatic_toggle").each(function (ap) { $(this).bind("click", function () { (ah == 0) ? X() : U() }) }); ao ? ac() : af(); $(document).bind("BIDS_AVAILABLE_CHANGED", function (aq, ap) { showConsole("processing BIDS_AVAILABLE_CHANGED with count:" + ap); if (ah) { V.setMaxBidomaticBids() } }); $(document).bind("AUCTION_" + ai + "_UPDATED", function (aq, ap) { if (ah) { QBar.triggerPoller() } }) } }; var al = function () { var am = parseCurrency($(ak).find("input[name=bidomatic_starting_amount]").val()); return parseFloat(am) }; var ab = function () { return parseFloat($(ak).find("input[name=bidomatic_number_of_bids]").val()) }; var ae = function () { if (Y != null) { var am = ((QBar.getTotalBids() != null) && (S > QBar.getTotalBids())) ? QBar.getTotalBids() : S; var an = (Y > am) ? am : Y; $(ak).find(".bidomatic_available").html(an); $(W).html(an); $("#bido_num_show").html(an + " / " + am); showConsole("thisBido.displayMaxBidomaticBids: maxBidomaticBids:" + S); showConsole("thisBido.displayMaxBidomaticBids: QBar.getTotalBids():" + QBar.getTotalBids()); showConsole("thisBido.displayMaxBidomaticBids: max:" + am); showConsole($("#bido_num_show").html()) } }; var T = function () { var am = ((QBar.getTotalBids() != null) && (S > QBar.getTotalBids())) ? QBar.getTotalBids() : S; $(ak).find(".bidomatic_max_bids").html(am); $("#bido_num_show").html(Y + " / " + am) }; var ag = function (an) { var am = formatPrice(parseCurrency(an)); $("#bido_from_show").html(am) }; var X = function () { if (typeof Auctions == "object") { Auctions.triggerActivity() } var aq = false; var am = []; var at = al(); V.setMaxBidomaticBids(ab()); if (isNaN(at) || (at < ad)) { am.push(_t.display("error_starting_bid", "Enter a starting bid! It must be larger than the current price of %PRICE%.", { PRICE: parseCurrency(ad) })) } if (S < 3) { am.push(_t.display("error_num_auto_bid", "You must specify at least 3 automatic bids.")) } else { if (S > 25) { am.push(_t.display("error_too_much_bidomatic", "You are not allowed to use more than 25 bids for a BidOMatic.")) } } if (am.length == 0) { var ar = new Date(); var an = "/ajax/bidomatic.php?auctionid=" + ai + "&bido_from=" + at + "&bido_num=" + S; $.ajax({ url: an, cache: false, dataType: "json", success: Z }); Y = S; ae(); T(); aq = true } else { var ao = "<strong>" + _t.display("following_errors_occurred", "The following errors occured:") + '</strong><ul style="margin-left:10px">'; for (var ap = 0; ap < am.length; ap++) { ao += "<li>" + am[ap] + "</li>" } ao += "</ul>"; popupErrorMsg(ao, _t.display("bidomatic_setup", "Bid-O-Matic Setup")) } lastUserActivity = (new Date()).getTime(); return aq }; var Z = function (am) { if (typeof (am.message) == "object") { am = am.message } try { if (typeof (am.errorText) == "string") { popupErrorMsg(_t.display("error_processing_request_msg", "There was an error processing your request: %MSG%", { MSG: am.errorText }), "Bid-O-Matic Message"); return } if (typeof (am.msg) == "string") { popupErrorMsg(am.msg, "Bid-O-Matic Message"); return } var an = 0; if (!am.num || !am.avail) { popupErrorMsg(_t.display("error_processing_request", "There was an error processing your request."), "Bid-O-Matic Message"); return } ac(); ag(am.from); V.setMaxBidomaticBids(am.num); V.setAvailableBidomaticBids(am.avail) } catch (ao) { showConsole(ao, "JS Error - Bido Update") } }; var ac = function () { $(document).trigger("BIDOMATIC_" + ai + "_ACTIVATED"); ah = 1; $(W).show(); $(ak).find(".bidomatic_active").show(); $(ak).find(".bidomatic_not_active").hide(); $(ak).find(".bidomatic_on").toggle(); Q.isActivated = true }; var U = function () { if (typeof Auctions == "object") { Auctions.triggerActivity() } ah = 0; $(W).hide(); var an = false; var ao = new Date(); var am = "/ajax/bidomatic.php?auctionid=" + ai + "&action=delete"; $.ajax({ url: am, cache: false, dataType: "json", success: aj }); lastUserActivity = (new Date()).getTime(); return an }; var af = function () { $(ak).find(".bidomatic_active").hide(); $(ak).find(".bidomatic_not_active").show(); $(document).trigger("BIDOMATIC_" + ai + "_DEACTIVATED"); Q.isActivated = false }; var aj = function (am) { af() }; this.noMoreBidsAvailable = function () { af() }; this.reload = function () { T(); ae() }; this.setAvailableBidomaticBids = function (am) { Y = am; ae() }; this.setMaxBidomaticBids = function (am) { if (typeof am != "undefined") { S = am } T() } }; this.init = function (S) { $('[id^="bidomatic_"]').each(function (T) { R = true; if (this.id.match(/^bidomatic_[\d]+$/)) { var U = 0; id = this.id.replace("bidomatic_", ""); if (S == id) { U = 1 } Q.add(id, U) } }) }; this.add = function (S, T) { var U = new P(); U.init(S, T, this); N[N.length] = U }; this.process = function (U) {
            for (var T = 0; T < N.length; T++) {
                if (N[T].getAuctionId() == U.aid) {
                    N[T].setMaxBidomaticBids(U.num); N[T].setAvailableBidomaticBids(U.avail); if (U.avail == 0) {
                        N[T].noMoreBidsAvailable(); var S = "<strong>" + _t.display("following_errors_occurred", "The following errors occured:") + '</strong><ul style="margin-left:10px">'; S += "<li>" + _t.display("bidomatic_outofbids", "Your Bid-O-Matic has run out of bids") + "</li>"; S += "</ul>";
                        popupErrorMsg(S, _t.display("bidomatic_setup", "Bid-O-Matic Setup"))
                    }
                }
            }
        }
    }; var q = new g(); var K = 0; var n = 0; var c = false; var u = false; var L = ""; var j = ""; var h = "full"; var o; var f = 30; var F = 0; var B = new Array(); var G = new Array(); var D = new Array(); var I = false; var m = 1; var b = false; var e = (new Date()).getTime(); var M = null; var d = this; var r = false; $(document).ready(function () { q.init(n); y(); if (!readCookie("qbarShown")) { $("#qbar").css({ height: 0 }).show().animate({ height: "32" }, "slow"); createCookie("qbarShown", true) } else { $("#qbar").css({ height: "32px" }).show() } $(document).bind("INACTIVITY_DETECTED", function (O, N) { r = N }); $("#qbar_btn_qbar_show").click(function () { y("show") }); $("#qbar_btn_qbar_hide").click(function () { y("hide") }); $("#qbar_btn_username").click(function () { s("username") }); $("#qbar_btn_myquibids").click(function () { s("myquibids") }); $("#qbar_btn_mybids").click(function () { s("mybids") }); $("#qbar_btn_mygames").click(function () { s("mygames") }); $("#qbar_btn_watchlist").click(function () { s("watchlist") }); $("#qbar_btn_notify").click(function () { s("notify") }); $("#qbar_btn_support").click(function () { s("support") }); $("#qbar_close_username").click(function () { w("username") }); $("#qbar_close_myquibids").click(function () { w("myquibids") }); $("#qbar_close_mybids").click(function () { w("mybids") }); $("#qbar_close_mygames").click(function () { w("mygames") }); $("#qbar_close_watchlist").click(function () { w("watchlist") }); $("#qbar_close_notify").click(function () { w("notify") }); $("#qbar_close_support").click(function () { w("support") }); $("#template_bidsavailable_click").click(function () { s("mybids"); return false }); v(""); if (typeof Auctions != "undefined") { f = 30 } else { f = 60 } QBar.triggerPoller() }); this.setTotalBids = function (N) { M = N; return this }; this.getTotalBids = function () { return M }; this.addBidomaticAuction = function (N) { n = N }; this.addAuctionDetail = function (N) { K = N }; this.qbarPoller = function () { if (typeof Auctions == "undefined") { if ((new Date()).getTime() > e + (1000 * 60 * 10)) { return } } if (r == true) { showConsole("Auctions Updates are InActive. Don't update qbar"); return } var N = ""; if (q.isActivated) { N = N + "bido=1&" } showConsole(N); if ((typeof (auctionDetailedID) != "undefined") && auctionDetailedID) { N += "aid=" + auctionDetailedID } $.ajax({ url: N, cache: false, dataType: "json", timeout: 2500, success: t }) }; this.bidoActivated = function () { return q.isActivated }; this.triggerPoller = function () { if (o) { o.stop() } o = $.timer(f * 1000, QBar.qbarPoller); QBar.qbarPoller() }; function t(N) { try { for (id in N) { try { if (id == "bids_avail") { QBar.updateBidsAvailable(N[id]) } else { if (id == "bids_auction") { if (typeof (AuctionDetail) !== "undefined") { AuctionDetail.updateSavings(N[id]); continue } } else { if (id == "bido") { q.process(N[id]) } else { if (id == "notifications") { A(N[id]) } else { if (id == "watchwarning") { QBar.showAuctionWarning(N[id]) } } } } } } catch (O) { showConsole(O, "JS Error 1"); continue } } } catch (O) { showConsole(O, "JS Error 2") } } this.qbarWatchPoller = function () { var O = $("#watchlist_auction_ids").val(); if (!O || O == null || O == undefined) { I.stop(); I = false; return } var N = "/ajax/u.php?o=3&w=ys&ids=" + O; $.ajax({ url: N, cache: false, dataType: "json", timeout: 1500, success: a }) }; function a(N) { try { if (N && N.errorText) { return } for (id in N) { if ($("#watchlist_time_" + id) && N[id].s == "Completed") { QBar.auctionUpdateTime(id, 0, k(0)) } if ($("#watchlist_time_" + id) && N[id].sl) { QBar.auctionUpdateTime(id, N[id].sl, k(N[id].sl)) } if ($("#watchlist_price_" + id) && N[id].p) { QBar.auctionUpdatePrice(id, N[id].p.toFixed(2)) } } } catch (O) { showConsole(O, "JS Error 3") } } function y(O, N) { if (typeof Auctions == "object") { Auctions.triggerActivity() } N = (typeof N == "undefined") ? true : N; if (!O) { u = readCookie("qbarDisabled"); if (u) { O = "hide" } else { O = "show" } } else { u = (O == "hide" ? true : false); if (u && N) { createCookie("qbarDisabled", true, 180) } else { eraseCookie("qbarDisabled"); QBar.qbarPoller() } } if (O == "hide") { $("#qbar_full").hide(); $("#qbar_small").show(); $("#qbar").addClass("hidden") } else { $("#qbar_small").hide(); $("#qbar_full").show(); $("#qbar").removeClass("hidden") } this.qbar_state = (O == "hide") ? "small" : "full" } function s(N) { if (typeof Auctions == "object") { Auctions.triggerActivity() } if (L == N) { w(N) } else { if (L != "" && L != N) { w(L) } L = N; $("#qbar_btn_" + N).addClass("selected"); z(N) } } function z(O) { if ($("#qbar_popup_help:visible").length > 0) { $("#qbar_popup_help").clearQueue(); $("#qbar_popup_help").slideToggle("fast") } var N = 0; var P = $("#qbar_li_" + O).offset(); if (O == "watchlist" || O == "notify") { N = P.left - 16 - $("#qbar_popup_" + O).width() + $("#qbar_li_" + O).width() } else { N = P.left - 15 - ($("#qbar_popup_" + O).width() - $("#qbar_li_" + O).width()) / 2 } $("#qbar_popup_" + O).css({ left: N + "px" }); if (O == "watchlist") { QBar.updateWatchContent() } else { if (O == "mybids") { QBar.updateBuyBidsContent() } } $("#qbar_popup_" + O).slideToggle("fast"); $("body").bind("click.qbarOff", function (Q) { if (typeof Auctions == "object") { Auctions.triggerActivity() } if (!$(Q.target).closest("#qbar_popup_" + O).length && !$(Q.target).closest("#qbar_btn_" + O).length && !$(Q.target).closest("#qbar_li_" + O).length) { w(O) } return true }); return true } function J(N) {
        if (typeof Auctions == "object") { Auctions.triggerActivity() } if (!$(N.target).closest("#qbar_popup_" + popupCat).length && !$(N.target).closest("#qbar_btn_" + popupCat).length && !$(N.target).closest("#qbar_li_" + popupCat).length) {
            w(popupCat)
        } return true
    } function w(N) { if (typeof Auctions == "object") { Auctions.triggerActivity() } $("body").unbind("click.qbarOff"); $("#qbar_btn_" + N).removeClass("selected"); $("#qbar_popup_" + N).hide(); L = ""; if (N == "watchlist" && I) { I.stop(); I = false } return true } function p(P, R, Q, N) { if (!Q) { Q = 4000 } var T = $("#qbar_li_" + P).offset(); var O = T.left - 15; if (O + $("#qbar_popup_help").width() > $(document).width()) { O = $(document).width() - $("#qbar_popup_help").width() - 15 } var S = ""; if (N) { S += '<a href="' + N + '">' } S += "<p>" + R + "</p>"; if (N) { S += "</a>" } $("#qbar_help_cont").html(S); $("#qbar_popup_help").css({ left: O + "px" }); $("#qbar_popup_help").slideToggle("fast").delay(Q).fadeOut(400) } this.showAlert = function (P, O, N) { if (!O) { O = 4000 } var Q = ""; if (N) { Q += '<a href="' + N + '">' } Q += "<p>" + P + "</p>"; if (N) { Q += "</a>" } $.notify({ inline: true, html: Q }, O) }; function l(N, O) { if (O != "success") { return } A(N.notifications) } function A(P) { var N = 0; var O = "<ul>"; for (id in P) { var R = P[id]; var Q = ""; if (!R.m || R.s == "Deleted") { continue } var S = R.s == "Clicked" ? "" : 'style="font-weight:bold; cursor:pointer"'; if (N < 6) { O += '<li id="nm' + R.id + '" class="'; if (R.t == "Badge") { O += "badge1" } else { if (R.t == "Message") { O += "update" } else { if (R.t == "Games") { O += "gameplay" } else { if (R.t == "Promotion") { O += "promotion" } } } } if ((typeof Auctions === "undefined" || !Auctions.userHasBid()) && R.p.length > 0) { popupShowURL(R.p + "?id=" + R.id, _t.display("congratulations", "Congratulations!"), 550, true, _t.display("close", "Close")) } if (N > 0) { O += " lineabove" } O += '">'; O += '<a onclick="QBar.ackNotifications(' + R.id + ",'Deleted'); QBar.notificationRemove('nm" + R.id + '\');" class="delete">delete</a>'; Q = "<a " + S + ' onclick="QBar.ackNotifications(' + R.id + ",'Clicked');\""; if (R.l.length > 0) { Q += 'href="' + R.l + '">' + R.m + "</a>" } else { if (R.s != "Clicked") { Q += ">" + R.m + "</a>" } else { Q = R.m } } O += "<p>" + Q + "</p>"; O += "</li>" } N++ } if (N == 0) { O += "<li>" + _t.display("no_notifications", "No notifications!") + "</li>" } O += "</ul>"; $("#qbar_popup_notifications").html(O); if (N > 6) { $("#qbar_popup_notifications_more").show() } else { $("#qbar_popup_notifications_more").hide() } v(N) } this.notificationRemove = function (N) { $("#nm" + N).fadeOut() }; this.ackNotifications = function (P, O) { var N = "" + P + "&status=" + O; $.ajax({ url: N, cache: false, dataType: "json", timeout: 2500, success: l }); return false }; function v(O) { if (O == 0) { O = "" } var N = parseInt($("#qbar_notify_count").text(), 10); if (N == O || $("#qbar_notify_count").text() == O) { return } if ($("#qbar_notify_count")) { $("#qbar_notify_count").html(O) } if (b === false && O >= 0) { b = O } else { if (O >= b && L != "notify") { p("notify", "You have a new notification!") } } } var E = null; this.updateBuyBidsContent = function () { $("#qbuy_select_content").html(""); if (!E) { H("", "ajax-loader.gif"); $.ajax({ url: "/ajax/qbar_quickbuy.php?action=getSaved", cache: true, dataType: "json", timeout: 3000, success: function (N) { E = N; C(E) } }) } else { C(E) } }; var C = function (O) { $("#qbuy_select_content_loading").hide(); billingDisabled = jQuery.isEmptyObject(O.billings); if (billingDisabled == false) { var Q = ""; if (readCookie("quickBuyCardDefault")) { Q = readCookie("quickBuyCardDefault") } var P = ""; for (id in O.billings) { P += '<option value="' + id + '" ' + (Q == id ? "selected" : "") + ">" + O.billings[id] + "</option>" } $("#qbuy_select_content").html('<select name="quickBuyCard" id="quickBuyCard" style="font-size:10px;width:120px;">' + P + "</select>"); var N = readCookie("qbarQuickBuyAmt"); if (N == undefined || N < 50) { N = 100 } $("#quickBuySlider").slider({ value: N, min: O.min, max: O.max, step: O.step, animate: true, slide: function (R, S) { $("#quickBuyAmount").html(S.value + " " + _t.display("bids", "Bids") + " - " + cSymbol + (S.value * O.price) + " " + cCode + '<font style="font-size:8px">' + O.extra + "</font>") } }); $("#quickBuyAmount").val("$" + $("#quickBuySlider").slider("value")); $("#quickBuyAmount").html($("#quickBuySlider").slider("value") + " " + _t.display("bids", "Bids") + " - " + cSymbol + ($("#quickBuySlider").slider("value") * O.price) + " " + cCode + '<font style="font-size:8px">' + O.extra + "</font>"); $("#qbuy_select_content_no").hide(); $("#qbuy_select_content_yes").show() } else { $("#qbuy_select_content_yes").hide(); $("#qbuy_select_content_no").show() } }; this.quickBuyBids = function () { var P = $("#quickBuySlider").slider("value"); H(_t.display("processing_purchase", "Processing purchase") + " ...", "ajax-loader.gif"); var O = $("#quickBuyCard").val(); createCookie("quickBuyCardDefault", O, 7); var N = "/ajax/qbar_quickbuy.php?action=quickBuy&card=" + O + "&amount=" + P; $.ajax({ url: N, cache: false, dataType: "json", success: function (R) { var Q = "error_icon.png"; try { for (id in R) { try { if (id == "bids_avail") { QBar.updateBidsAvailable(R[id]) } else { if (id == "success") { Q = "success_icon.png" } else { if (id == "msg") { H(R[id], Q) } else { if (id == "script") { $("body").append(R[id]) } } } } } catch (S) { showConsole(S, "JS Error 4"); continue } } } catch (S) { showConsole(S, "JS Error 5") } } }); createCookie("qbarQuickBuyAmt", P, 60); return false }; var H = function (O, N) {
        if (N) { $("#qbuy_select_content_icon").attr("src", "https://static.quibids.com/site/images/qbar/" + N + "") } else { $("#qbuy_select_content_icon").attr("src", "") } $("#qbuy_select_content_message").html(O); $("#qbuy_select_content_loading").show(); $("#qbuy_select_content_no").hide(); $("#qbuy_select_content_yes").hide()
    }; this.updateBidsAvailable = function (P) { if (!P) { return } var O = P.r + P.v; d.setTotalBids(O); if (parseInt($("#qbar_bidsavailable").html()) != O) { showConsole("firing event BIDS_AVAILABLE_CHANGED", O); $(document).trigger("BIDS_AVAILABLE_CHANGED", O) } $("#qbar_bidsavailable").html(O); $("#qbar_bidsavailable2").html(O); $("#qbar_bidsavailable_real").html(P.r); $("#qbar_bidsavailable_free").html(P.v); $("#template_bidsavailable").html(O); var N = P.r + " " + _t.display("real", "Real") + " / " + P.v + " " + _t.display("voucher", "Voucher"); $("#template_bidsavailable_full").attr("title", N); reTool() }; $(document).ready(function () { $("input[name='bidsfirst']").change(function () { QBar.updateBidPreference($(this).val()); try { if ($(this).val() == "Real") { $("#realBidsRadio").attr("checked", true) } else { $("#voucherBidsRadio").attr("checked", true) } } catch (N) { showConsole(N, "JS Error 6") } }) }); this.updateBidPreference = function (O) {
        $(".bidchoice_text")
            .html("<img src='../img/Layout/ajax-loader.gif' />"); $(".bidchoice_text").fadeIn(); var N = "/ajax/settings.php?action=updateBidPreference&value=" + O; $.ajax({ url: N, cache: false, dataType: "json", timeout: 10000, success: function (P) { if (P.infoMsg) { $(".bidchoice_text").html('<font color="green">' + P.infoMsg + "</font>") } else { if (P.errorMsg) { $(".bidchoice_text").html('<font color="red">' + P.errorMsg + "</font>") } else { $(".bidchoice_text").html('<font color="red">Unknown Error Message</font>') } } setTimeout(function () { $(".bidchoice_text").fadeOut() }, 5000) }, error: function () { $("#bidchoice_text").html('<font color="red">Unknown Error</font>'); setTimeout(function () { $(".bidchoice_text").fadeOut() }, 5000) } })
    }; this.showAuctionWarning = function (O) { try { for (var N = 0; N < O.length; N++) { var Q = _t.display("watchlist_ending", "%ITEMNAME%  will begin ending in less than two minutes!", { ITEMNAME: O[N].title }); p("watchlist", Q, 4500, "/auction.php?id=" + O[N].id) } } catch (P) { showConsole(P, "JS Error 7"); return false } }; function i(O) { try { for (id in O) { if (id == "content") { $("#qbar_watchcontent").html(O[id]); continue } else { if (id == "count") { if (O[id] > 5) { $("#qbar_watchlist_actions").show() } else { $("#qbar_watchlist_actions").hide() } var N = (O[id] < 5 ? O[id] : 5) * 72; if (N == 0) { N = 80 } $("#qbar_watchcontent").animate({ height: N + "px" }, "slow") } else { if (id == "titles") { D = O[id] } } } } for (id in D) { Auctions.register([id]) } } catch (P) { showConsole(P, "JS Error 8"); return false } try { $(".scrollable").scrollable({ vertical: true, mousewheel: true }) } catch (P) { } } this.auctionUpdatePrice = function (P, N) { try { if (!$("#watchlist_price_" + P)) { return } if (N <= B[P]) { return } $("#watchlist_price_" + P).html("$" + N); $("#watchlist_price_" + P).effect("highlight", { color: "#f66b6b" }, 600); B[P] = N } catch (O) { showConsole(O, "JS Error 9") } return false }; this.auctionUpdateTime = function (Q, N, P) { try { if (!$("#watchlist_time_" + Q).length) { return } if (N < 1) { P = "Ended" } $("#watchlist_time_" + Q).html(P) } catch (O) { showConsole(O, "JS Error 10") } return false }; this.updateWatchContent = function () { $("#qbar_watchcontent").html("Loading..."); var N = ""; $.ajax({ url: N, cache: false, dataType: "json", timeout: 2500, success: i }); $("#qbarWLPrevious").click($.proxy(this.prevWatchPage, this)); $("#qbarWLNext").click($.proxy(this.nextWatchPage, this)); this.watchlistPage = 1; $("#qbarWLPrevious").addClass("disabled-link"); if (!I) { I = $.timer(m * 1000, QBar.qbarWatchPoller) } }; this.removeWatched = function (P) { try { var N = "/ajax/qbar.php?action=deleteWatch&auctionid=" + P; $.ajax({ url: N, cache: false, dataType: "json", timeout: 2500, success: i }) } catch (O) { showConsole(O, "JS Error 11") } return false }; this.changeWatchPage = function (N) { if (!$("#watchlistPage_" + N)[0]) { return } if (!$("#watchlistPage_" + (N + 1))[0]) { $("#qbarWLNext").addClass("disabled-link") } else { $("#qbarWLNext").removeClass("disabled-link") } if (!$("#watchlistPage_" + (N - 1))[0]) { $("#qbarWLPrevious").addClass("disabled-link") } else { $("#qbarWLPrevious").removeClass("disabled-link") } $("#watchlistPage_" + this.watchlistPage).hide(); $("#watchlistPage_" + N).show(); this.watchlistPage = N }; this.nextWatchPage = function (N) { this.changeWatchPage(this.watchlistPage + 1) }; this.prevWatchPage = function (N) { this.changeWatchPage(this.watchlistPage - 1) }; this.updateConnectionSpeed = function (N) { if (!$("#qbar_connectionspeed")) { return } var O = 0; if (N < 250) { O = 4 } else { if (N < 350) { O = 3 } else { if (N < 600) { O = 2 } else { O = 1 } } } if (O == F) { return } F = O; for (x = 1; x <= 4; x++) { $("#qbar_connectionspeed").removeClass("qconnect" + x) } $("#qbar_connectionspeed").addClass("qconnect" + F); if (F < 2) { $("#qbar_connectionspeed").attr("title", _t.display("no_internet_connection_title", "No connection to QuiBids")) } else { if (F == 2) { $("#qbar_connectionspeed").attr("title", _t.display("low_internet_connection_title", "Low connection speed to QuiBids")) } else { if (F == 3) { $("#qbar_connectionspeed").attr("title", _t.display("average_internet_connection_title", "Average connection speed to QuiBids")) } else { if (F == 4) { $("#qbar_connectionspeed").attr("title", _t.display("good_internet_connection_title", "Good connection speed to QuiBids")) } } } } }; this.popupConnectionSpeed = function () {
        var N = ""; if (F < 2) {
            N = _t.display("no_internet_connection", "No detected connection to QuiBids. Please check your internet connection.")
        } else { if (F == 2) { N = _t.display("low_internet_connection", "Low connection speed to QuiBids. Make sure you are not downloading anything.") } else { if (F == 3) { N = _t.display("average_internet_connection", "Average connection speed to QuiBids. Make sure you are not downloading anything.") } else { if (F == 4) { N = _t.display("good_internet_connection", "Good connection speed to QuiBids. You should have the best experience!") } } } } p("connection", N, 4500)
    }; function k(Q) { var O = Math.floor(Q / (60 * 60)); Q -= Math.floor(O * (60 * 60)); if (O < 10) { O = "0" + O } var N = Math.floor(Q / 60); Q -= Math.floor(N * 60); if (N < 10) { N = "0" + N } var P = Q; if (P < 10) { P = "0" + P } return (O ? O : "00") + ":" + (N ? N : "00") + ":" + (P ? P : "00") } this.toggle = function () { if (this.qbar_state == "full") { this.minimize() } else { this.maximize() } }; this.minimize = function () { this.qbar_state = "small"; y("hide", false) }; this.maximize = function () { this.qbar_state = "full"; y("show", false) }
} QBar = new Class_QBar(); qBarEnabled = true;